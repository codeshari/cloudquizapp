[
    {
      "question": "In a Kubernetes cluster, how can you securely store sensitive information such as API tokens or database passwords?",
      "answers": [
        { "text": "Using ConfigMaps", "isCorrect": false },
        { "text": "Using Secrets", "isCorrect": true },
        { "text": "Storing directly in YAML files", "isCorrect": false },
        { "text": "Environment variables", "isCorrect": false }
      ]
    },
    {
      "question": "What type of encoding is used to encode the data in a Kubernetes Secret?",
      "answers": [
        { "text": "Base64", "isCorrect": true },
        { "text": "MD5", "isCorrect": false },
        { "text": "SHA-256", "isCorrect": false },
        { "text": "AES", "isCorrect": false }
      ]
    },
    {
      "question": "You need to create a Kubernetes Secret from an existing file. Which command would you use?",
      "answers": [
        { "text": "kubectl create secret generic my-secret --from-file=file.txt", "isCorrect": true },
        { "text": "kubectl apply -f secret.yaml", "isCorrect": false },
        { "text": "kubectl set secret my-secret --from-file=file.txt", "isCorrect": false },
        { "text": "kubectl create secret docker-registry my-secret --docker-server=example.com", "isCorrect": false }
      ]
    },
    {
      "question": "What happens if you try to update the value of a key in an existing Kubernetes Secret?",
      "answers": [
        { "text": "The Secret is updated automatically", "isCorrect": false },
        { "text": "You need to delete and recreate the Secret", "isCorrect": true },
        { "text": "The update is rejected to maintain immutability", "isCorrect": false },
        { "text": "You can only update Secret values through environment variables", "isCorrect": false }
      ]
    },
    {
      "question": "When using a Kubernetes Secret in a Pod, how are the Secret values exposed to the containers?",
      "answers": [
        { "text": "As environment variables", "isCorrect": true },
        { "text": "As mounted volumes", "isCorrect": false },
        { "text": "As command-line arguments", "isCorrect": false },
        { "text": "As files in the /secrets directory", "isCorrect": false }
      ]
    },
    {
      "question": "You want to share a Secret between two namespaces in Kubernetes. How can you achieve this?",
      "answers": [
        { "text": "Secrets cannot be shared between namespaces", "isCorrect": false },
        { "text": "Using Persistent Volumes (PV)", "isCorrect": false },
        { "text": "Using Persistent Volume Claims (PVC)", "isCorrect": false },
        { "text": "By creating identical Secrets in each namespace", "isCorrect": true }
      ]
    },
    {
      "question": "Which type of Kubernetes Secret is suitable for storing Docker registry authentication information?",
      "answers": [
        { "text": "Opaque Secret", "isCorrect": false },
        { "text": "DockerConfigJSON Secret", "isCorrect": true },
        { "text": "Service Account Token Secret", "isCorrect": false },
        { "text": "TLS Secret", "isCorrect": false }
      ]
    },
    {
      "question": "You need to create a Kubernetes Secret for TLS certificates. What type of Secret should you use?",
      "answers": [
        { "text": "Opaque Secret", "isCorrect": false },
        { "text": "DockerConfigJSON Secret", "isCorrect": false },
        { "text": "Service Account Token Secret", "isCorrect": false },
        { "text": "TLS Secret", "isCorrect": true }
      ]
    },
    {
      "question": "What is the purpose of the `kubectl get secrets` command with the `--output=json` flag?",
      "answers": [
        { "text": "To display Secrets in JSON format", "isCorrect": true },
        { "text": "To create a new Secret from a JSON file", "isCorrect": false },
        { "text": "To delete a Secret using a JSON specification", "isCorrect": false },
        { "text": "To update Secret values using JSON input", "isCorrect": false }
      ]
    },
    {
      "question": "You have a requirement to rotate a Kubernetes Secret regularly. What is the recommended approach?",
      "answers": [
        { "text": "Use the same Secret and update its values periodically", "isCorrect": false },
        { "text": "Create a new Secret with updated values and delete the old one", "isCorrect": true },
        { "text": "Use environment variables to rotate Secret values dynamically", "isCorrect": false },
        { "text": "Rotate Secrets manually during maintenance windows", "isCorrect": false }
      ]
    },
    {
        "question": "You have a Kubernetes Secret containing sensitive information. How can you ensure that it's not accidentally displayed in plain text in the cluster logs?",
        "answers": [
          { "text": "Set the Secret's data field to null", "isCorrect": false },
          { "text": "Encrypt the Secret using a Kubernetes encryption provider", "isCorrect": true },
          { "text": "Use the 'kubectl logs' command with the '--no-secrets' option", "isCorrect": false },
          { "text": "Change the Secret's type to 'opaque'", "isCorrect": false }
        ]
      },
      {
        "question": "When creating a Kubernetes Secret with the 'kubectl create secret generic' command, how can you specify multiple key-value pairs from the command line?",
        "answers": [
          { "text": "Only one key-value pair can be specified per 'kubectl create secret' command", "isCorrect": false },
          { "text": "Use the '--from-literal' option multiple times", "isCorrect": true },
          { "text": "Provide a YAML file with multiple entries using '--from-file'", "isCorrect": false },
          { "text": "Combine values into a single string and use '--from-literal'", "isCorrect": false }
        ]
      },
      {
        "question": "You need to create a Kubernetes Secret from a file containing multiple key-value pairs. Which 'kubectl create secret' command should you use?",
        "answers": [
          { "text": "kubectl create secret generic my-secret --from-file=secrets.yaml", "isCorrect": false },
          { "text": "kubectl create secret generic my-secret --from-env-file=secrets.yaml", "isCorrect": true },
          { "text": "kubectl apply -f secrets.yaml", "isCorrect": false },
          { "text": "kubectl set secret my-secret --from-file=secrets.yaml", "isCorrect": false }
        ]
      },
      {
        "question": "In a Kubernetes environment, what is the primary role of RBAC (Role-Based Access Control) regarding Secrets?",
        "answers": [
          { "text": "To encrypt Secrets at rest", "isCorrect": false },
          { "text": "To control who can create and manage Secrets", "isCorrect": true },
          { "text": "To restrict access to Secrets based on their types", "isCorrect": false },
          { "text": "To automate the rotation of Secrets", "isCorrect": false }
        ]
      },
      {
        "question": "You are working with a Pod that requires access to multiple Secrets. What is a recommended approach to manage these Secrets efficiently?",
        "answers": [
          { "text": "Combine all Secrets into a single Secret for simplicity", "isCorrect": false },
          { "text": "Use environment variables for each Secret individually", "isCorrect": false },
          { "text": "Create a ServiceAccount and associate it with the necessary Secrets", "isCorrect": true },
          { "text": "Mount all Secrets as volumes in the Pod", "isCorrect": false }
        ]
      },
      {
        "question": "What is the purpose of the 'default-token' Secret in a Kubernetes ServiceAccount?",
        "answers": [
          { "text": "To store API server access tokens", "isCorrect": true },
          { "text": "To encrypt communication between Pods", "isCorrect": false },
          { "text": "To hold default environment variables for Pods", "isCorrect": false },
          { "text": "To authenticate against external services", "isCorrect": false }
        ]
      },
      {
        "question": "You want to create a Kubernetes Secret with sensitive information for a specific namespace. How can you achieve this?",
        "answers": [
          { "text": "Secrets are automatically scoped to the namespace in which they are created", "isCorrect": true },
          { "text": "Specify the namespace using the '--namespace' option during creation", "isCorrect": false },
          { "text": "Set the 'namespace' field in the Secret's YAML definition", "isCorrect": false },
          { "text": "Create the Secret at the cluster level and use RBAC to restrict access", "isCorrect": false }
        ]
      },
      {
        "question": "You have a scenario where multiple Pods in different namespaces need to access the same Secret. What is a recommended approach?",
        "answers": [
          { "text": "Replicate the Secret in each namespace to ensure isolation", "isCorrect": false },
          { "text": "Use the 'kubectl get secret' command with the '--namespace' option to access the Secret from any namespace", "isCorrect": false },
          { "text": "Create a ServiceAccount in a central namespace and associate it with the Secret", "isCorrect": true },
          { "text": "Use the 'kubectl cp' command to copy the Secret between namespaces", "isCorrect": false }
        ]
      },
      {
        "question": "What is the purpose of the 'kubernetes.io/service-account-token' type of Secret?",
        "answers": [
          { "text": "To store Docker registry authentication information", "isCorrect": false },
          { "text": "To hold TLS certificates for secure communication", "isCorrect": false },
          { "text": "To provide API server access tokens for ServiceAccounts", "isCorrect": true },
          { "text": "To encrypt communication between Pods in a namespace", "isCorrect": false }
        ]
      },
      {
        "question": "When updating a Kubernetes Secret, which of the following fields is immutable and cannot be changed?",
        "answers": [
          { "text": "Data field", "isCorrect": false },
          { "text": "Type field", "isCorrect": false },
          { "text": "Name field", "isCorrect": true },
          { "text": "Namespace field", "isCorrect": false }
        ]
      },
      {
        "question": "You have a requirement to update a Kubernetes Secret without causing a disruption to the associated Pods. What is a recommended approach?",
        "answers": [
          { "text": "Delete and recreate the Pods after updating the Secret", "isCorrect": false },
          { "text": "Use Rolling Updates to gradually replace old Pods with new ones", "isCorrect": true },
          { "text": "Update the Secret in-place, and Pods will automatically pick up changes", "isCorrect": false },
          { "text": "Manually restart each Pod after updating the Secret", "isCorrect": false }
        ]
      },
      {
        "question": "You are deploying an application in Kubernetes that requires access to a Secret during initialization. How can you make sure the Secret is available before the application starts?",
        "answers": [
          { "text": "Use a readiness probe in the Pod definition", "isCorrect": false },
          { "text": "Delay the application startup using a sleep command in the container", "isCorrect": true },
          { "text": "Configure an init container to fetch and mount the Secret", "isCorrect": false },
          { "text": "Manually check for the Secret in the application code", "isCorrect": false }
        ]
      },
      {
        "question": "You have a multi-container Pod, and both containers need access to the same Secret. What is a recommended way to share the Secret between the containers?",
        "answers": [
          { "text": "Create a separate Secret for each container", "isCorrect": false },
          { "text": "Use a shared volume to mount the Secret into both containers", "isCorrect": true },
          { "text": "Inject the Secret as environment variables individually for each container", "isCorrect": false },
          { "text": "Manually copy the Secret data between containers during startup", "isCorrect": false }
        ]
      },
      {
        "question": "In Kubernetes, what is the purpose of the 'kubernetes.io/service-account.name' key in the 'default-token' Secret associated with a ServiceAccount?",
        "answers": [
          { "text": "To store the ServiceAccount name", "isCorrect": true },
          { "text": "To hold API server access tokens", "isCorrect": false },
          { "text": "To provide default environment variables for Pods", "isCorrect": false },
          { "text": "To authenticate against external services", "isCorrect": false }
        ]
      },
      {
        "question": "When using Helm to deploy applications in Kubernetes, how can you manage Secrets within Helm charts?",
        "answers": [
          { "text": "Embed Secrets directly in Helm charts", "isCorrect": true },
          { "text": "Use Helm secrets plugin for secure management", "isCorrect": false },
          { "text": "Manually apply Secrets after deploying Helm charts", "isCorrect": false },
          { "text": "Use Helm hooks to dynamically fetch and apply Secrets", "isCorrect": false }
        ]
      },
      {
        "question": "You have a scenario where a third-party application needs to access a Kubernetes Secret. What is a recommended way to grant access without exposing the entire Secret?",
        "answers": [
          { "text": "Share the entire Secret with the third-party application", "isCorrect": false },
          { "text": "Create a ServiceAccount for the third-party application and grant RBAC permissions", "isCorrect": true },
          { "text": "Use environment variables to pass individual Secret values to the application", "isCorrect": false },
          { "text": "Copy the Secret data manually to a shared location accessible by the third-party application", "isCorrect": false }
        ]
      },
      {
        "question": "In a Kubernetes cluster, what is the impact of updating a Secret with the same data?",
        "answers": [
          { "text": "The update is rejected to maintain immutability", "isCorrect": true },
          { "text": "The update is automatically propagated to all Pods using the Secret", "isCorrect": false },
          { "text": "The Secret's version is incremented, and existing Pods continue to use the old version", "isCorrect": false },
          { "text": "The Secret is deleted and recreated with the same data", "isCorrect": false }
        ]
      },
      {
        "question": "You are using Kubernetes RBAC to control access to Secrets. What permission is required for a user to create a new Secret in a specific namespace?",
        "answers": [
          { "text": "secrets/create", "isCorrect": false },
          { "text": "secrets/update", "isCorrect": false },
          { "text": "secrets/edit", "isCorrect": false },
          { "text": "secrets/create in the specific namespace", "isCorrect": true }
        ]
      },
      {
        "question": "You want to ensure that a Kubernetes Secret is not accidentally deleted. What is a recommended approach?",
        "answers": [
          { "text": "Use finalizers in the Secret's metadata", "isCorrect": true },
          { "text": "Set the Secret's deletion timestamp to a distant future date", "isCorrect": false },
          { "text": "Create a backup of the Secret before making changes", "isCorrect": false },
          { "text": "Apply a label to the Secret indicating 'do-not-delete'", "isCorrect": false }
        ]
      },
      {
        "question": "You need to create a Kubernetes Secret with multiple data fields. What is the maximum size limit for a single Secret in the etcd datastore?",
        "answers": [
          { "text": "1 MB", "isCorrect": false },
          { "text": "2 MB", "isCorrect": true },
          { "text": "5 MB", "isCorrect": false },
          { "text": "10 MB", "isCorrect": false }
        ]
      },
      {
        "question": "You have a Kubernetes Secret containing a sensitive key-value pair, and you need to update only the value. What is a recommended approach?",
        "answers": [
          { "text": "Delete and recreate the Secret with the updated value", "isCorrect": false },
          { "text": "Use 'kubectl edit secret' to update the value in-place", "isCorrect": true },
          { "text": "Manually modify the Secret YAML file and apply the changes", "isCorrect": false },
          { "text": "Create a new Secret with the updated value and delete the old one", "isCorrect": false }
        ]
      },
      {
        "question": "You want to grant a user the ability to read Secrets in any namespace but not modify or create new Secrets. What RBAC permission is required?",
        "answers": [
          { "text": "secrets/list", "isCorrect": false },
          { "text": "secrets/get", "isCorrect": true },
          { "text": "secrets/read", "isCorrect": false },
          { "text": "secrets/view", "isCorrect": false }
        ]
      },
      {
        "question": "You have a requirement to synchronize a Kubernetes Secret's data with an external system in real-time. What is a recommended approach?",
        "answers": [
          { "text": "Manually trigger a job to synchronize the Secret periodically", "isCorrect": false },
          { "text": "Use Kubernetes ConfigMap for real-time data synchronization", "isCorrect": false },
          { "text": "Leverage external tools like HashiCorp Vault for dynamic Secret management", "isCorrect": true },
          { "text": "Set up a webhook to automatically update the Secret on changes in the external system", "isCorrect": false }
        ]
      },
      {
        "question": "You are managing Secrets for a microservices architecture, and each microservice requires its own set of Secrets. What is a recommended way to organize Secrets in this scenario?",
        "answers": [
          { "text": "Use a single Secret for all microservices to simplify management", "isCorrect": false },
          { "text": "Create a separate namespace for each microservice and manage Secrets within the namespace", "isCorrect": true },
          { "text": "Embed Secrets directly in each microservice's container image", "isCorrect": false },
          { "text": "Store all Secrets in a central location and have microservices fetch them dynamically", "isCorrect": false }
        ]
      },
      {
        "question": "You are troubleshooting a Kubernetes Pod that is not able to access a Secret. What could be a potential issue?",
        "answers": [
          { "text": "The Secret is not created in the correct namespace", "isCorrect": true },
          { "text": "The Secret has expired, and its data needs to be regenerated", "isCorrect": false },
          { "text": "The Pod does not have the necessary RBAC permissions to access the Secret", "isCorrect": false },
          { "text": "The Secret's data is not encoded in Base64 format", "isCorrect": false }
        ]
      },
      {
        "question": "You need to manage sensitive configuration data for a Kubernetes application, and you want to ensure that the data is encrypted at rest. What is a recommended approach?",
        "answers": [
          { "text": "Use a ConfigMap and enable encryption at rest in the cluster", "isCorrect": false },
          { "text": "Leverage a Helm chart to manage encrypted configuration data", "isCorrect": false },
          { "text": "Store the data in a Kubernetes Secret and rely on the cluster's built-in encryption", "isCorrect": true },
          { "text": "Manually encrypt the data and store it in environment variables within the Pod", "isCorrect": false }
        ]
      },
      {
        "question": "You are managing Kubernetes Secrets in a Git repository for version control. What is a recommended way to handle sensitive information securely?",
        "answers": [
          { "text": "Encrypt the entire Git repository using Git's built-in encryption", "isCorrect": false },
          { "text": "Use a tool like GitCrypt to selectively encrypt specific files containing Secrets", "isCorrect": true },
          { "text": "Avoid version controlling Secrets and manage them separately from the Git repository", "isCorrect": false },
          { "text": "Use Git submodules to reference an external repository containing encrypted Secrets", "isCorrect": false }
        ]
      },
      {
        "question": "You are working with a Kubernetes cluster using an external authentication provider (OIDC, LDAP, etc.). How does this impact RBAC permissions for accessing Secrets?",
        "answers": [
          { "text": "External authentication providers do not affect RBAC permissions for accessing Secrets", "isCorrect": false },
          { "text": "RBAC permissions can be linked to external groups or roles from the authentication provider", "isCorrect": true },
          { "text": "External authentication providers grant full access to all Secrets by default", "isCorrect": false },
          { "text": "RBAC permissions for accessing Secrets need to be manually synchronized with the authentication provider", "isCorrect": false }
        ]
      },
      {
        "question": "You are using Helm to deploy a Kubernetes application, and the application requires access to multiple Secrets. What is a recommended approach to manage Secrets within the Helm chart?",
        "answers": [
          { "text": "Embed all Secrets directly in the Helm chart", "isCorrect": true },
          { "text": "Use Helm hooks to fetch Secrets dynamically during deployment", "isCorrect": false },
          { "text": "Create a separate Helm chart for each Secret", "isCorrect": false },
          { "text": "Manually apply Secrets after deploying the Helm chart", "isCorrect": false }
        ]
      },
      {
        "question": "You are working in a Kubernetes environment where multiple teams manage Secrets for their respective applications. What is a recommended approach to ensure isolation between teams?",
        "answers": [
          { "text": "Use a single namespace for all teams and rely on RBAC for isolation", "isCorrect": false },
          { "text": "Create separate namespaces for each team and implement RBAC within each namespace", "isCorrect": true },
          { "text": "Have a central team manage all Secrets to ensure consistency", "isCorrect": false },
          { "text": "Store all Secrets in a central repository and use them across namespaces", "isCorrect": false }
        ]
      },
      {
        "question": "You have a Kubernetes Secret that contains a certificate file. How can you ensure that the certificate is automatically rotated before it expires?",
        "answers": [
          { "text": "Use a CronJob to periodically update the Secret with a new certificate", "isCorrect": true },
          { "text": "Manually check the certificate expiration and update the Secret", "isCorrect": false },
          { "text": "Set up a Kubernetes event trigger to rotate the certificate", "isCorrect": false },
          { "text": "Embed a script in the Pod that automatically rotates the certificate", "isCorrect": false }
        ]
      },
      {
        "question": "You are designing a Kubernetes architecture with multiple clusters, and you need to share Secrets between clusters. What is a recommended approach?",
        "answers": [
          { "text": "Replicate Secrets manually between clusters", "isCorrect": false },
          { "text": "Use a centralized Secret management tool that supports multi-cluster synchronization", "isCorrect": true },
          { "text": "Create identical Secrets in each cluster independently", "isCorrect": false },
          { "text": "Use Kubernetes Federation to automatically synchronize Secrets between clusters", "isCorrect": false }
        ]
      },
      {
        "question": "You have a requirement to audit changes to Kubernetes Secrets for compliance reasons. What is a recommended approach?",
        "answers": [
          { "text": "Enable Kubernetes audit logging for Secrets in the cluster", "isCorrect": true },
          { "text": "Manually review the Kubernetes API server logs for Secret changes", "isCorrect": false },
          { "text": "Leverage third-party tools to monitor Secret changes", "isCorrect": false },
          { "text": "Disable write access to Secrets for auditing purposes", "isCorrect": false }
        ]
      },
      {
        "question": "You are deploying a stateful application in Kubernetes, and each instance of the application requires unique Secrets. What is a recommended way to manage these instance-specific Secrets?",
        "answers": [
          { "text": "Create a separate namespace for each instance and manage Secrets within the namespace", "isCorrect": false },
          { "text": "Use Helm to dynamically generate and deploy instance-specific Secrets during installation", "isCorrect": true },
          { "text": "Manually create instance-specific Secrets before deploying each instance of the application", "isCorrect": false },
          { "text": "Embed instance-specific Secrets directly in the container image", "isCorrect": false }
        ]
      },
      {
        "question": "You are using Kubernetes Helm charts to manage your application, and the charts require access to multiple Secrets. What is a recommended way to organize these Secrets within the Helm chart?",
        "answers": [
          { "text": "Create a separate Helm chart for each Secret", "isCorrect": false },
          { "text": "Embed all Secrets directly in the main Helm chart", "isCorrect": true },
          { "text": "Use Helm hooks to fetch Secrets dynamically during deployment", "isCorrect": false },
          { "text": "Store all Secrets in a central location and reference them from the Helm chart", "isCorrect": false }
        ]
      },
      {
        "question": "You are using Helm to deploy applications in Kubernetes, and some Helm charts require sensitive information. What is a recommended way to manage these secrets securely?",
        "answers": [
          { "text": "Embed secrets directly in Helm charts, and use Helm's built-in encryption", "isCorrect": true },
          { "text": "Use Kubernetes Secrets for non-sensitive data and environment variables for sensitive data", "isCorrect": false },
          { "text": "Store secrets in plaintext files within the Helm chart, and rely on RBAC for access control", "isCorrect": false },
          { "text": "Encrypt the entire Helm chart using an external encryption tool before deploying", "isCorrect": false }
        ]
      },
      {
        "question": "You are managing a Kubernetes cluster with multiple applications, each requiring its own set of Secrets. What is a recommended approach to maintain a clear separation of Secrets for different applications?",
        "answers": [
          { "text": "Use a single Secret for all applications to simplify management", "isCorrect": false },
          { "text": "Create separate namespaces for each application and manage Secrets within the namespace", "isCorrect": true },
          { "text": "Embed Secrets directly in each application's container image", "isCorrect": false },
          { "text": "Store all Secrets in a central location and use RBAC to control access", "isCorrect": false }
        ]
      },
      {
        "question": "You are managing Secrets for a Kubernetes application that interacts with external APIs. What is a recommended way to securely store API keys?",
        "answers": [
          { "text": "Embed API keys directly in the application code", "isCorrect": false },
          { "text": "Store API keys as environment variables within the Pod", "isCorrect": false },
          { "text": "Create a Kubernetes Secret to store API keys and mount it into the Pod", "isCorrect": true },
          { "text": "Encrypt API keys and store them in a ConfigMap within the namespace", "isCorrect": false }
        ]
      }
  ]
  